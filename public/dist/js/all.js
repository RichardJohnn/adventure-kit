(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pixel = function Pixel(x, y) {
  _classCallCheck(this, Pixel);

  this.x = x;
  this.y = y;
  this.highlighted = false;
  this.color = null;
};

;

exports["default"] = Pixel;
module.exports = exports["default"];

},{}],2:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _pixel = require('./pixel');

var _pixel2 = _interopRequireDefault(_pixel);

document.addEventListener('DOMContentLoaded', function () {
  var bgCanvas = document.getElementById('bg-canvas');
  var drawCanvas = document.getElementById('draw-canvas');
  var overlayCanvas = document.getElementById('overlay-canvas');

  var bgCtx = bgCanvas.getContext('2d');
  var drawCtx = drawCanvas.getContext('2d');
  var overlayCtx = drawCanvas.getContext('2d');

  var WIDTH = bgCanvas.width;
  var HEIGHT = bgCanvas.height;
  var BG_TILE_SIZE = 8;
  var PIXEL_SIZE = 32;

  var PixelGrid = [];

  function drawBackground() {
    var NUM_TILES_HORIZ = WIDTH / BG_TILE_SIZE;
    var NUM_TILES_VERT = HEIGHT / BG_TILE_SIZE;

    for (var i = 0; i < NUM_TILES_HORIZ; i++) {
      for (var j = 0; j < NUM_TILES_VERT; j++) {
        var x = i * BG_TILE_SIZE;
        var y = j * BG_TILE_SIZE;

        var fill = (i + j) % 2 == 0 ? '#999' : '#777';

        bgCtx.fillStyle = fill;
        bgCtx.fillRect(x, y, BG_TILE_SIZE, BG_TILE_SIZE);
      }
    }
  }

  function initializeDrawSurface() {
    var NUM_PIXELS_HORIZ = WIDTH / PIXEL_SIZE;
    var NUM_PIXELS_VERT = HEIGHT / PIXEL_SIZE;

    for (var x = 0; x < NUM_PIXELS_HORIZ; x++) {
      for (var y = 0; y < NUM_PIXELS_VERT; y++) {
        PixelGrid.push(new _pixel2['default'](x, y));
      }
    }
    console.log(PixelGrid);
  }

  function highlightPixel(ev) {
    var elRect = ev.target.getBoundingClientRect();
    var absX = ev.clientX;
    var absY = ev.clientY;
    var x = absX - elRect.left;
    var y = absY - elRect.top;

    var pixelX = Math.floor(x / PIXEL_SIZE);
    var pixelY = Math.floor(y / PIXEL_SIZE);

    var NUM_PIXELS = PixelGrid.length;

    for (var i = 0; i < NUM_PIXELS; i++) {
      var pixel = PixelGrid[i];
      if (pixel.x === pixelX && pixel.y === pixelY) {
        if (!pixel.highlighted) {
          var fillX = pixel.x * PIXEL_SIZE;
          var fillY = pixel.y * PIXEL_SIZE;

          overlayCtx.fillStyle = 'rgba(255, 255, 255, 0.2)';
          overlayCtx.fillRect(fillX, fillY, PIXEL_SIZE, PIXEL_SIZE);
          pixel.highlighted = true;
        }
      } else {
        if (pixel.highlighted) {
          var clearX = pixel.x * PIXEL_SIZE;
          var clearY = pixel.y * PIXEL_SIZE;

          overlayCtx.clearRect(clearX, clearY, PIXEL_SIZE, PIXEL_SIZE);
          pixel.highlighted = false;
        }
      }
    }
  }

  function paintPixel(ev) {
    var x = ev.clientX;
    var y = ev.clientY;
  }

  drawBackground();
  initializeDrawSurface();
  drawCanvas.addEventListener('mousemove', highlightPixel, false);
  drawCanvas.addEventListener('click', paintPixel, false);
});

},{"./pixel":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
