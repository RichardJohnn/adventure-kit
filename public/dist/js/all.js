(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var Pixel = require('./pixel');

var DrawSurface = function DrawSurface(container, params) {
  params || (params = {});
  this.container = container;
  if (!this.container) {
    throw new Exception('DrawSurface requires a container parameter.');
  }

  this.width = params.width || 512;
  this.height = params.height || 512;
  this.tileSize = params.tileSize || 32;
  this.bgTileSize = params.bgTileSize || 8;

  this.setupCanvas();
  this.drawBackground();
  this.initDrawSurface();

  this.container.addEventListener('mousemove', this.highlightPixel.bind(this), false);
  this.container.addEventListener('mouseout', this.clearHighlight.bind(this), false);
  this.container.addEventListener('mousedown', this.paintPixel.bind(this), false);
};

DrawSurface.prototype.setupCanvas = function () {
  this.bgCanvas = document.createElement('canvas');
  this.bgCanvas.setAttribute('width', this.width);
  this.bgCanvas.setAttribute('height', this.height);
  this.container.appendChild(this.bgCanvas);

  this.drawCanvas = document.createElement('canvas');
  this.drawCanvas.setAttribute('width', this.width);
  this.drawCanvas.setAttribute('height', this.height);
  this.container.appendChild(this.drawCanvas);

  this.overlayCanvas = document.createElement('canvas');
  this.overlayCanvas.setAttribute('width', this.width);
  this.overlayCanvas.setAttribute('height', this.height);
  this.container.appendChild(this.overlayCanvas);

  this.bgCtx = this.bgCanvas.getContext('2d');
  this.drawCtx = this.drawCanvas.getContext('2d');
  this.overlayCtx = this.overlayCanvas.getContext('2d');
};

DrawSurface.prototype.drawBackground = function () {
  var numTilesHoriz = this.width / this.bgTileSize;
  var numTilesVert = this.height / this.bgTileSize;

  for (var i = 0; i < numTilesHoriz; i++) {
    for (var j = 0; j < numTilesVert; j++) {
      var x = i * this.bgTileSize;
      var y = j * this.bgTileSize;

      var fill = (i + j) % 2 == 0 ? '#999' : '#777';

      this.bgCtx.fillStyle = fill;
      this.bgCtx.fillRect(x, y, this.bgTileSize, this.bgTileSize);
    }
  }
};

DrawSurface.prototype.initDrawSurface = function () {
  var numPixelsHoriz = this.width / this.tileSize;
  var numPixelsVert = this.height / this.tileSize;
  this.grid = [];

  for (var x = 0; x < numPixelsHoriz; x++) {
    this.grid[x] = [];

    for (var y = 0; y < numPixelsVert; y++) {
      this.grid[x].push(new Pixel(x, y));
    }
  }
};

DrawSurface.prototype.getPixelCoordinates = function (ev) {
  var elRect = ev.target.getBoundingClientRect();
  var absX = ev.clientX;
  var absY = ev.clientY;
  var x = absX - elRect.left;
  var y = absY - elRect.top;

  var pixelX = Math.floor(x / this.tileSize);
  var pixelY = Math.floor(y / this.tileSize);

  return { x: pixelX, y: pixelY };
};

DrawSurface.prototype.highlightPixel = function (ev) {
  var coords = this.getPixelCoordinates(ev);
  var x = coords.x;
  var y = coords.y;
  var numPixels = this.grid.length;

  var currentPixel = this.grid[x][y];
  if (!currentPixel.highlighted) {
    var fillX = currentPixel.x * this.tileSize;
    var fillY = currentPixel.y * this.tileSize;

    this.overlayCtx.fillStyle = 'rgba(255, 255, 255, 0.2)';
    this.overlayCtx.fillRect(fillX, fillY, this.tileSize, this.tileSize);
    currentPixel.highlighted = true;
  }

  this.clearHighlight(null, currentPixel);
};

DrawSurface.prototype.clearHighlight = function (ev, currentPixel) {
  var numPixelsHoriz = this.width / this.tileSize;
  var numPixelsVert = this.height / this.tileSize;
  for (var ix = 0; ix < numPixelsHoriz; ix++) {
    for (var iy = 0; iy < numPixelsVert; iy++) {
      var pixel = this.grid[ix][iy];
      if (pixel === currentPixel) {
        continue;
      }

      if (pixel.highlighted) {
        var clrX = pixel.x * this.tileSize;
        var clrY = pixel.y * this.tileSize;

        this.overlayCtx.clearRect(clrX, clrY, this.tileSize, this.tileSize);
        pixel.highlighted = false;
      }
    }
  }
};

DrawSurface.prototype.paintPixel = function (ev) {
  var coords = this.getPixelCoordinates(ev);
  var x = coords.x;
  var y = coords.y;
  var color = '#000000';
  var pixel = this.grid[x][y];

  var fillX = x * this.tileSize;
  var fillY = y * this.tileSize;
  this.drawCtx.fillStyle = color;
  this.drawCtx.fillRect(fillX, fillY, this.tileSize, this.tileSize);
  pixel.color = color;
};

exports = module.exports = DrawSurface;

},{"./pixel":3}],2:[function(require,module,exports){
"use strict";

var FileHandler = function FileHandler(el) {
  this.el = el;
};

exports = module.exports = FileHandler;

},{}],3:[function(require,module,exports){
"use strict";

var Pixel = function Pixel(x, y) {
  this.x = x;
  this.y = y;
  this.highlighted = false;
  this.color = null;
};

exports = module.exports = Pixel;

},{}],4:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _draw_surface = require('./draw_surface');

var _draw_surface2 = _interopRequireDefault(_draw_surface);

var _file_handler = require('./file_handler');

var _file_handler2 = _interopRequireDefault(_file_handler);

document.addEventListener('DOMContentLoaded', function () {
  var drawContainer = document.getElementById('tile-map');
  var drawSurface = new _draw_surface2['default'](drawContainer);

  var tmxFileHandler = new _file_handler2['default'](document.getElementById('tmx-file'));
});

},{"./draw_surface":1,"./file_handler":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
