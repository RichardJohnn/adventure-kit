(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pixel = function Pixel(x, y) {
  _classCallCheck(this, Pixel);

  this.x = x;
  this.y = y;
  this.highlighted = false;
  this.color = null;
};

;

exports["default"] = Pixel;
module.exports = exports["default"];

},{}],2:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }

var _pixel = require('./pixel');

var _pixel2 = _interopRequireDefault(_pixel);

document.addEventListener('DOMContentLoaded', function () {
  var bgCanvas = document.getElementById('bg-canvas');
  var drawCanvas = document.getElementById('draw-canvas');
  var overlayCanvas = document.getElementById('overlay-canvas');

  var bgCtx = bgCanvas.getContext('2d');
  var drawCtx = drawCanvas.getContext('2d');
  var overlayCtx = overlayCanvas.getContext('2d');

  var WIDTH = bgCanvas.width;
  var HEIGHT = bgCanvas.height;
  var BG_TILE_SIZE = 8;
  var PIXEL_SIZE = 32;

  var PixelGrid = [];

  function drawBackground() {
    var NUM_TILES_HORIZ = WIDTH / BG_TILE_SIZE;
    var NUM_TILES_VERT = HEIGHT / BG_TILE_SIZE;

    for (var i = 0; i < NUM_TILES_HORIZ; i++) {
      for (var j = 0; j < NUM_TILES_VERT; j++) {
        var x = i * BG_TILE_SIZE;
        var y = j * BG_TILE_SIZE;

        var fill = (i + j) % 2 == 0 ? '#999' : '#777';

        bgCtx.fillStyle = fill;
        bgCtx.fillRect(x, y, BG_TILE_SIZE, BG_TILE_SIZE);
      }
    }
  }

  function initializeDrawSurface() {
    var NUM_PIXELS_HORIZ = WIDTH / PIXEL_SIZE;
    var NUM_PIXELS_VERT = HEIGHT / PIXEL_SIZE;

    for (var x = 0; x < NUM_PIXELS_HORIZ; x++) {
      PixelGrid[x] = [];

      for (var y = 0; y < NUM_PIXELS_VERT; y++) {
        PixelGrid[x].push(new _pixel2['default'](x, y));
      }
    }
  }

  function getPixelCoordinates(ev) {
    var elRect = ev.target.getBoundingClientRect();
    var absX = ev.clientX;
    var absY = ev.clientY;
    var x = absX - elRect.left;
    var y = absY - elRect.top;

    var pixelX = Math.floor(x / PIXEL_SIZE);
    var pixelY = Math.floor(y / PIXEL_SIZE);

    return [pixelX, pixelY];
  }

  function highlightPixel(ev) {
    console.log('HIGHLIGHT');

    var _getPixelCoordinates = getPixelCoordinates(ev);

    var _getPixelCoordinates2 = _slicedToArray(_getPixelCoordinates, 2);

    var x = _getPixelCoordinates2[0];
    var y = _getPixelCoordinates2[1];

    var NUM_PIXELS = PixelGrid.length;

    // highlight the pixel under the mouse
    var currentPixel = PixelGrid[x][y];
    if (!currentPixel.highlighted) {
      var fillX = currentPixel.x * PIXEL_SIZE;
      var fillY = currentPixel.y * PIXEL_SIZE;

      overlayCtx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      overlayCtx.fillRect(fillX, fillY, PIXEL_SIZE, PIXEL_SIZE);
      currentPixel.highlighted = true;
    }

    // clear highlighting on other pixels
    var NUM_PIXELS_HORIZ = WIDTH / PIXEL_SIZE;
    var NUM_PIXELS_VERT = HEIGHT / PIXEL_SIZE;
    for (var ix = 0; ix < NUM_PIXELS_HORIZ; ix++) {
      for (var iy = 0; iy < NUM_PIXELS_VERT; iy++) {
        var pixel = PixelGrid[ix][iy];
        if (pixel === currentPixel) {
          continue;
        }

        if (pixel.highlighted) {
          var fillX = pixel.x * PIXEL_SIZE;
          var fillY = pixel.y * PIXEL_SIZE;

          overlayCtx.clearRect(fillX, fillY, PIXEL_SIZE, PIXEL_SIZE);
          drawCtx.fillStyle = pixel.color;
          drawCtx.fillRect(fillX, fillY, PIXEL_SIZE, PIXEL_SIZE);
          pixel.highlighted = false;
        }
      }
    }
  }

  function paintPixel(ev) {
    var _getPixelCoordinates3 = getPixelCoordinates(ev);

    var _getPixelCoordinates32 = _slicedToArray(_getPixelCoordinates3, 2);

    var x = _getPixelCoordinates32[0];
    var y = _getPixelCoordinates32[1];

    var color = '#000000';
    var pixel = PixelGrid[x][y];

    var fillX = x * PIXEL_SIZE;
    var fillY = y * PIXEL_SIZE;
    drawCtx.fillStyle = color;
    drawCtx.fillRect(fillX, fillY, PIXEL_SIZE, PIXEL_SIZE);
    pixel.color = color;
  }

  drawBackground();
  initializeDrawSurface();
  overlayCanvas.addEventListener('mousemove', highlightPixel, false);
  drawCanvas.addEventListener('mousedown', paintPixel, false);
});

},{"./pixel":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
